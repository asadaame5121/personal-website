<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/assets/styles.css">
    <title>DropGarden</title>
</head>

<body>

<div id="canvas-container"></div>
<div class="tile-info" id="tile-info"></div>

<script src="https://pixijs.download/v8.8.0/pixi.min.js"></script>
<script>
    // カテゴリーごとの記事数（例）
    const categoryArticleCounts = {
        'Resources': 15,
        'Article': 25,
        'Glossary': 10
    };

    class DropGardenMap {
        constructor(options = {}) {
            this.options = Object.assign({
                container: document.getElementById('canvas-container'),
                width: window.innerWidth,
                height: window.innerHeight,
                tileSize: 64, // Kenney Block Packのタイルサイズは64x64
                mapWidth: 30,
                mapHeight: 20,
                backgroundColor: 0xF2EFE2, // イングリッシュガーデンの象牙色
                onTileClick: null,
            }, options);

            this.container = typeof this.options.container === 'string'
                ? document.querySelector(this.options.container)
                : this.options.container;

            this.app = null;
            this.mapContainer = null;
            this.tiles = [];
            this.textures = {};
            this.categories = ['Resources', 'Article', 'Glossary']; // カテゴリー

            this.init();
        }

        /**
         * 初期化
         */
        async init() {
            // PixiJS v8用のアプリケーションの作成
            this.app = new PIXI.Application({
                width: this.options.width,
                height: this.options.height,
                backgroundColor: this.options.backgroundColor,
                resolution: window.devicePixelRatio || 1,
                autoDensity: true,
            });

            // v8ではレンダラーを明示的に作成してコンテナに追加する
            await this.app.init();
            this.container.appendChild(this.app.canvas);

            // マップコンテナの作成
            this.mapContainer = new PIXI.Container();
            this.app.stage.addChild(this.mapContainer);
            
            // レイヤーの作成
            this.terrainLayer = new PIXI.Container(); // 地形レイヤー
            this.objectLayer = new PIXI.Container();  // オブジェクトレイヤー
            
            // レイヤーをマップコンテナに追加
            this.mapContainer.addChild(this.terrainLayer);
            this.mapContainer.addChild(this.objectLayer);

            // 中央に配置
            this.mapContainer.x = this.options.width / 2;
            this.mapContainer.y = this.options.height / 2;

            // テクスチャーの読み込み
            await this.loadTextures();

            // マップの生成
            this.generateMap();

            // イベントリスナーの設定
            this.setupEventListeners();
        }

        /**
         * テクスチャーの読み込み
         */
        async loadTextures() {
            // PixiJS v8ではAssets APIを使用
            await PIXI.Assets.init();
            
            // スプライトシートとJSONデータの読み込み
            const baseUrl = window.location.origin;
            
            // スプライトシートの読み込み
            const spritesheet = await PIXI.Assets.load(baseUrl + '/assets/images/medievalRTS_spritesheet.json');
            
            // テクスチャの設定
            this.textures = {
                // 基本的な地形
                water: spritesheet.textures["medievalTile_27.png"],
                grass: spritesheet.textures["medievalTile_57.png"],
                dirt: spritesheet.textures["medievalTile_13.png"],
                stone: spritesheet.textures["medievalTile_28.png"],
                
                // 自然物
                tree: spritesheet.textures["medievalTile_42.png"],
                
                // 特殊タイル
                treasure: spritesheet.textures["medievalStructure_07.png"],
                character: spritesheet.textures["medievalUnit_01.png"]
            };
        }

        /**
         * マップの生成
         */
        generateMap() {
            // 大陸型の配置を生成
            const continentMap = this.createContinentMap();
            
            // タイルの配置
            for (let y = 0; y < this.options.mapHeight; y++) {
                for (let x = 0; x < this.options.mapWidth; x++) {
                    const tileInfo = continentMap[y][x];
                    this.createTile(x, y, tileInfo);
                }
            }
            
            // 深度ソート
            this.terrainLayer.sortChildren();
            this.objectLayer.sortChildren();
        }

        /**
         * 大陸型マップの生成
         */
        createContinentMap() {
            const map = [];
            const width = this.options.mapWidth;
            const height = this.options.mapHeight;
            
            // カテゴリーの中心位置
            const categoryPositions = [
                { x: Math.floor(width * 0.25), y: Math.floor(height * 0.25), name: 'Resources' },
                { x: Math.floor(width * 0.75), y: Math.floor(height * 0.25), name: 'Article' },
                { x: Math.floor(width * 0.5), y: Math.floor(height * 0.75), name: 'Glossary' }
            ];
            
            // Topicnoteの中心位置（マップの中央）
            const topicnoteCenter = { x: Math.floor(width * 0.5), y: Math.floor(height * 0.4) };
            
            // マップの初期化（すべて水で埋める）
            for (let y = 0; y < height; y++) {
                map[y] = [];
                for (let x = 0; x < width; x++) {
                    map[y][x] = { 
                        type: 'water', 
                        texture: 'water',
                        height: 0,
                        category: null
                    };
                }
            }
            
            // カテゴリーエリアの生成
            categoryPositions.forEach(category => {
                const radius = Math.floor(Math.min(width, height) * 0.15); // カテゴリーエリアの半径
                
                for (let y = 0; y < height; y++) {
                    for (let x = 0; x < width; x++) {
                        const distance = Math.sqrt(Math.pow(x - category.x, 2) + Math.pow(y - category.y, 2));
                        
                        if (distance < radius) {
                            // カテゴリーエリア内
                            if (distance < radius * 0.2) {
                                // カテゴリーの中心
                                map[y][x] = {
                                    type: 'category',
                                    texture: 'treasure',  // house → treasure に変更
                                    height: 1.0,
                                    category: category.name
                                };
                            } else {
                                // カテゴリーエリア（記事）
                                map[y][x] = {
                                    type: 'article',
                                    texture: 'grass',
                                    height: 0.5,
                                    category: category.name
                                };
                                
                                // ランダムに木を配置
                                if (Math.random() < 0.1) {
                                    map[y][x].texture = 'tree';
                                    map[y][x].height = 1.0;
                                } else if (Math.random() < 0.05) {
                                    map[y][x].texture = 'character';  // rock → character に変更
                                    map[y][x].height = 0.7;
                                }
                            }
                        } else if (map[y][x].type === 'water') {
                            // カテゴリーエリアの境界付近は砂浜にする
                            if (distance < radius + 2) {
                                map[y][x] = {
                                    type: 'shore',
                                    texture: 'dirt',
                                    height: 0.2,
                                    category: null
                                };
                            }
                        }
                    }
                }
            });
            
            // Topicnoteエリアの生成（マップの中央付近）
            const topicnoteRadius = Math.floor(Math.min(width, height) * 0.1);
            
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    const distance = Math.sqrt(Math.pow(x - topicnoteCenter.x, 2) + Math.pow(y - topicnoteCenter.y, 2));
                    
                    if (distance < topicnoteRadius) {
                        map[y][x] = {
                            type: 'topicnote',
                            texture: 'stone',
                            height: 0.8,
                            category: null
                        };
                    }
                }
            }
            
            return map;
        }

        /**
         * タイルの作成
         */
        createTile(x, y, tileInfo) {
            // タイルのスプライトを作成
            const sprite = new PIXI.Sprite(this.textures[tileInfo.texture]);
            
            // スプライトの設定
            sprite.anchor.set(0.5);
            sprite.x = (x - this.options.mapWidth / 2) * this.options.tileSize;
            sprite.y = (y - this.options.mapHeight / 2) * this.options.tileSize;
            
            // 等角投影風の見た目にするための調整
            sprite.y -= tileInfo.height * 20; // 高さに応じてY座標を調整
            
            // タイルの種類に応じた色調整
            if (tileInfo.type === 'category') {
                sprite.tint = 0xFFCC33; // 黄金色
            } else if (tileInfo.type === 'topicnote') {
                sprite.tint = 0xE8D0AA; // アンティーク地図の古紙色
            }
            
            // タイルデータを保存
            sprite.tileData = tileInfo;
            
            // クリックイベントの設定
            sprite.eventMode = 'static';
            sprite.cursor = 'pointer';
            sprite.on('pointerdown', () => this.onTileClick(tileInfo));
            
            // 適切なレイヤーに追加
            if (this.isTerrainTile(tileInfo)) {
                this.terrainLayer.addChild(sprite);
            } else {
                this.objectLayer.addChild(sprite);
            }
            
            this.tiles.push(sprite);
            
            // 深度ソート用のzIndex設定
            sprite.zIndex = y * this.options.mapWidth + x;
        }

        /**
         * 地形タイルかどうかを判定
         */
        isTerrainTile(tileInfo) {
            // 地形タイルの判定（水、草、土、石など）
            const terrainTextures = ['water', 'grass', 'dirt', 'stone'];
            return terrainTextures.includes(tileInfo.texture);
        }
        
        /**
         * タイルクリック時の処理
         */
        onTileClick(tileInfo) {
            console.log(`Clicked on ${tileInfo.type} tile`);
            
            if (this.options.onTileClick) {
                this.options.onTileClick(tileInfo);
            }
            
            // タイル情報の表示
            const tileInfoElement = document.getElementById('tile-info');
            if (tileInfoElement) {
                if (tileInfo.type === 'category') {
                    tileInfoElement.innerHTML = `<h3>${tileInfo.category}カテゴリー</h3>
                                              <p>このカテゴリーの記事一覧を表示します。</p>`;
                } else if (tileInfo.type === 'article') {
                    tileInfoElement.innerHTML = `<h3>${tileInfo.category}の記事</h3>
                                              <p>この記事を読むにはクリックしてください。</p>`;
                } else if (tileInfo.type === 'topicnote') {
                    tileInfoElement.innerHTML = `<h3>Topicnote</h3>
                                              <p>トピックノートを表示します。</p>`;
                } else {
                    tileInfoElement.innerHTML = `<p>タイプ: ${tileInfo.type}</p>`;
                }
            }
        }

        /**
         * イベントリスナーの設定
         */
        setupEventListeners() {
            // ウィンドウリサイズ時の処理
            window.addEventListener('resize', () => {
                this.app.renderer.resize(window.innerWidth, window.innerHeight);
                this.mapContainer.x = window.innerWidth / 2;
                this.mapContainer.y = window.innerHeight / 2;
            });
            
            // マップのドラッグ移動機能
            let isDragging = false;
            let prevX = 0;
            let prevY = 0;
            
            this.app.stage.eventMode = 'static';
            
            this.app.stage.on('pointerdown', (e) => {
                isDragging = true;
                prevX = e.global.x;
                prevY = e.global.y;
            });
            
            this.app.stage.on('pointermove', (e) => {
                if (isDragging) {
                    const dx = e.global.x - prevX;
                    const dy = e.global.y - prevY;
                    
                    this.mapContainer.x += dx;
                    this.mapContainer.y += dy;
                    
                    prevX = e.global.x;
                    prevY = e.global.y;
                }
            });
            
            this.app.stage.on('pointerup', () => {
                isDragging = false;
            });
            
            this.app.stage.on('pointerupoutside', () => {
                isDragging = false;
            });
        }
    }

    // DOMが読み込まれた後にマップを初期化
    document.addEventListener('DOMContentLoaded', () => {
        const map = new DropGardenMap({
            container: '#canvas-container',
            width: window.innerWidth,
            height: window.innerHeight
        });
    });
</script>

<style>
    body, html {
        margin: 0;
        padding: 0;
        overflow: hidden;
        width: 100%;
        height: 100%;
    }
    
    #canvas-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
    }
    
    .tile-info {
        position: absolute;
        bottom: 10px;
        left: 10px;
        z-index: 100;
        background-color: rgba(126, 84, 84, 0.7);
        padding: 10px;
        border-radius: 5px;
        font-family: sans-serif;
    }
</style>
</body>
</html>